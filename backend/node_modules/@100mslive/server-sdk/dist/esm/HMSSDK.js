import { logger, setLogLevel } from "./services/LoggerService";
import AuthService from "./services/AuthService";
import APIService from "./services/APIService";
import { ActiveRoomWrapper, AnalyticsWrapper, ExternalStreamWrapper, LiveStreamWrapper, RecordingAssetWrapper, RecordingWrapper, RoomCodeWrapper, RoomWrapper, SessionWrapper, } from "./api_wrappers";
/**
 * Server-side SDK for 100ms REST API endpoints.
 */
export class HMSSDK {
    /**
     * @param accessKey App Access Key from Dashboard
     * @param secret App Secret from Dashboard
     * @returns an instance of `HMS.SDK`
     */
    constructor(accessKey, secret) {
        if (!accessKey) {
            accessKey = process.env.HMS_ACCESS_KEY;
        }
        if (!secret) {
            secret = process.env.HMS_SECRET;
        }
        if (!accessKey || !secret) {
            const err = new Error("Please provide access key and secret key.");
            logger.error("Access key or secret not defined", err);
            throw err;
        }
        this.auth = new AuthService(accessKey, secret);
        this.api = new APIService(this.auth);
        this.activeRooms = new ActiveRoomWrapper(this.api);
        this.analytics = new AnalyticsWrapper(this.api);
        this.externalStreams = new ExternalStreamWrapper(this.api);
        this.liveStreams = new LiveStreamWrapper(this.api);
        this.recordingAssets = new RecordingAssetWrapper(this.api);
        this.recordings = new RecordingWrapper(this.api);
        this.roomCodes = new RoomCodeWrapper(this.api);
        this.rooms = new RoomWrapper(this.api);
        this.sessions = new SessionWrapper(this.api);
    }
    setLogLevel(level) {
        setLogLevel(level);
    }
}
//# sourceMappingURL=HMSSDK.js.map