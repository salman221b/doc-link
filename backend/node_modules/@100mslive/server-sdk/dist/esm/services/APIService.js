var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import axios from "axios";
import { logger } from "./LoggerService";
import { ErrorFactory } from "../errorFactory";
import { castDateFields, serializeQueryParams } from "../utils/typeUtils";
export default class APIService {
    constructor(authService) {
        this.authService = authService;
        this.baseUrl = process.env.HMS_ENV === "nonprod"
            ? "https://api-nonprod.100ms.live/v2"
            : "https://api.100ms.live/v2";
        this.axios = axios.create({
            baseURL: this.baseUrl,
            timeout: 3 * 60000,
        });
        this.setupAxios();
    }
    get(path, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.axios.get(path, {
                params: queryParams,
                paramsSerializer: (params) => serializeQueryParams(params),
            });
            logger.debug(`GET - ${path}
          Status code: ${resp.status}`);
            return castDateFields(resp.data);
        });
    }
    post(path, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.axios.post(path, payload !== null && payload !== void 0 ? payload : {});
            logger.debug(`POST - ${path}
          Status code: ${resp.status}`);
            return castDateFields(resp.data);
        });
    }
    setupAxios() {
        // use auth token for all requests, refresh auth token on getting 401
        this.axios.interceptors.request.use((config) => __awaiter(this, void 0, void 0, function* () {
            config.headers = {
                Authorization: `Bearer ${(yield this.authService.getManagementToken()).token}`,
                Accept: "application/json",
                "Content-Type": "application/json",
            };
            return config;
        }), (error) => Promise.reject(error));
        this.axios.interceptors.response.use((response) => {
            return response;
        }, (error) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e;
            const originalRequest = error.config;
            logger.error(`Error in ${(_a = originalRequest.method) === null || _a === void 0 ? void 0 : _a.toUpperCase()} API call - ${originalRequest.url}`, {
                statusCode: (_b = error.response) === null || _b === void 0 ? void 0 : _b.status,
                response: (_c = error.response) === null || _c === void 0 ? void 0 : _c.data,
            });
            if ((((_d = error.response) === null || _d === void 0 ? void 0 : _d.status) === 403 || ((_e = error.response) === null || _e === void 0 ? void 0 : _e.status) === 401) &&
                !originalRequest._retry) {
                logger.debug("Retrying request with refreshed token");
                originalRequest._retry = true;
                const { token: authToken } = yield this.authService.getManagementToken({
                    forceNew: true,
                });
                this.axios.defaults.headers.common["Authorization"] = "Bearer " + authToken;
                try {
                    return this.axios(originalRequest);
                }
                catch (error) {
                    throw this.convertAxiosErrorToHMS(error);
                }
            }
            return Promise.reject(this.convertAxiosErrorToHMS(error));
        }));
    }
    convertAxiosErrorToHMS(error) {
        var _a, _b, _c, _d;
        return ErrorFactory.MakeError((_a = error.response) === null || _a === void 0 ? void 0 : _a.status, (_b = error.response) === null || _b === void 0 ? void 0 : _b.statusText, 
        // @ts-ignore
        (_d = (_c = error.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.message);
    }
}
//# sourceMappingURL=APIService.js.map