var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { QueryObjectIterator } from "../utils/QueryObjectIterator";
/**
 * The wrapper class that implements all
 * {@link https://www.100ms.live/docs/server-side/v2/api-reference/room-codes/room-code-object Room Code API} calls.
 */
export default class RoomCodeWrapper {
    constructor(apiService) {
        this.apiService = apiService;
        this.basePath = "/room-codes";
    }
    /**
     * Retrieve room codes for all roles in a room. Use the filters to get room
     * codes for a specific role or only the enabled room codes. A `HMS.RoomCode.Object`
     * iterable is returned that can be iterated with a `for await` loop.
     * @param roomId Room ID
     * @param filters Room Code filters like `enabled` status and `role`
     * @returns a `HMS.QueryObjectIterator<HMS.RoomCode.Object>` object
     */
    list(roomId, filters) {
        const queryObjectIterable = new QueryObjectIterator((queryParams) => this.apiService.get(`${this.basePath}/room/${roomId}`, queryParams), filters);
        return queryObjectIterable;
    }
    /**
     * Creates room code for all the roles in the room at once. The created
     * room codes list is returned.
     * @param roomId Room ID
     * @returns a `HMS.RoomCode.Object[]` object
     */
    create(roomId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const results = yield this.apiService.post(`${this.basePath}/room/${roomId}`);
            return (_a = results.data) !== null && _a !== void 0 ? _a : [];
        });
    }
    /**
     * Creates room code for a specific role in the room. The created
     * room code is returned.
     * @param roomId Room ID
     * @param role Role for which the Room Code is to be created
     * @returns a `HMS.RoomCode.Object` object
     */
    createForRole(roomId, role) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.post(`${this.basePath}/room/${roomId}/role/${role}`);
        });
    }
    /**
     * Updates the current state for a given room code. This can be used
     * to enable or disable a room code.
     * @param code THe Room Code string
     * @param enabled Enabled status of the Room Code
     * @returns a `HMS.RoomCode.Object` object
     */
    enableOrDisable(code, enabled) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.post(`${this.basePath}/code`, {
                code,
                enabled,
            });
        });
    }
}
//# sourceMappingURL=RoomCodeWrapper.js.map