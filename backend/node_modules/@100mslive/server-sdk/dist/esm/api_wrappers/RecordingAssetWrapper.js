var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { QueryObjectIterator } from "../utils/QueryObjectIterator";
/**
 * The wrapper class that implements all
 * {@link https://www.100ms.live/docs/server-side/v2/api-reference/recording-assets/overview Recording Asset API} calls.
 */
export default class RecordingAssetWrapper {
    constructor(apiService) {
        this.apiService = apiService;
        this.basePath = "/recording-assets";
    }
    /**
     * Get a list of recording asset objects that satisfy the `filter` params. A
     * `HMS.RecordingAsset.Object` iterable is returned that can be iterated with a `for await` loop.
     * @param filters Recording asset filters like room ID and status
     * @returns a `HMS.QueryObjectIterator<HMS.RecordingAsset.Object>` object
     */
    list(filters) {
        const queryObjectIterable = new QueryObjectIterator((queryParams) => this.apiService.get(this.basePath, queryParams), filters);
        return queryObjectIterable;
    }
    /**
     * Get the details of recording asset by asset id.
     * @param assetId Asset ID
     * @returns a `HMS.RecordingAsset.Object` object
     */
    retrieve(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.get(`${this.basePath}/${assetId}`);
        });
    }
    /**
     * Generate a short-lived pre-signed URL to access the recording asset.
     * @param assetId Asset ID
     * @param params Params to generate pre-signed URL
     * @returns a `HMS.RecordingAsset.PreSignedURL` object
     */
    generatePreSignedURL(assetId, presign_duration = 3600) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.get(`${this.basePath}/${assetId}/presigned-url`, { presign_duration });
        });
    }
}
//# sourceMappingURL=RecordingAssetWrapper.js.map