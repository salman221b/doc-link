var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { logger } from "../services/LoggerService";
import { QueryObjectIterator } from "../utils/QueryObjectIterator";
/**
 * The wrapper class that implements all
 * {@link https://www.100ms.live/docs/server-side/v2/api-reference/Rooms/object Room API} calls.
 */
export default class RoomWrapper {
    constructor(apiService) {
        this.apiService = apiService;
        this.basePath = "/rooms";
    }
    /**
     * Get a list of room objects that satisfy the `filter` params. If you want
     * to get all the rooms related to your account, don't pass in any param. A
     * `HMS.Room.Object` iterable is returned that can be iterated with a `for await` loop.
     * @param filters Room filters like enabled status and time range
     * @returns a `HMS.QueryObjectIterator<HMS.Room.Object>` object
     */
    list(filters) {
        const queryObjectIterable = new QueryObjectIterator((queryParams) => this.apiService.get(this.basePath, queryParams), filters);
        return queryObjectIterable;
    }
    /**
     * Get the details of a room by room id.
     * @param roomId Room ID
     * @returns a `HMS.Room.Object` object
     */
    retrieveById(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.get(`${this.basePath}/${roomId}`);
        });
    }
    /**
     * Get the details of a room by room name. Throws an error if there's no room with that name,
     * so use this with a `try-catch` block.
     * @param name Room name
     * @returns a `HMS.Room.Object` object
     */
    retrieveByName(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = yield this.apiService.get(this.basePath, { name });
            if (!results.data || results.data.length === 0) {
                const err = new Error(`No Room found with passed in name - ${name}`);
                logger.error("No Room found", err);
                throw err;
            }
            return results.data[0];
        });
    }
    /**
     * Create a new room with a specific configuration. If the room already exists,
     * the object of that existing room will be returned.
     * @param config Config of the Room to be created
     * @returns a `HMS.Room.Object` object
     */
    create(config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.post(this.basePath, config);
        });
    }
    /**
     * Update an existing room's configuration like `name`, `description`,
     * `recording_info` and `region` by specifying the room id.
     * @param roomId Room ID
     * @param params Options of the Room to be updated
     * @returns a `HMS.Room.Object` object
     */
    update(roomId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.post(`${this.basePath}/${roomId}`, params);
        });
    }
    /**
     * Enable or disable a room. Disabling a room would block the peers from
     * any future attempts of joining that room until it is enabled again.
     * @param roomId Room ID
     * @param enabled Enabled status of Room
     * @returns a `HMS.Room.Object` object
     */
    enableOrDisable(roomId, enabled) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.post(`${this.basePath}/${roomId}`, { enabled });
        });
    }
}
//# sourceMappingURL=RoomWrapper.js.map