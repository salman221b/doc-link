"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HMSSDK = void 0;
const LoggerService_1 = require("./services/LoggerService");
const AuthService_1 = __importDefault(require("./services/AuthService"));
const APIService_1 = __importDefault(require("./services/APIService"));
const api_wrappers_1 = require("./api_wrappers");
/**
 * Server-side SDK for 100ms REST API endpoints.
 */
class HMSSDK {
    /**
     * @param accessKey App Access Key from Dashboard
     * @param secret App Secret from Dashboard
     * @returns an instance of `HMS.SDK`
     */
    constructor(accessKey, secret) {
        if (!accessKey) {
            accessKey = process.env.HMS_ACCESS_KEY;
        }
        if (!secret) {
            secret = process.env.HMS_SECRET;
        }
        if (!accessKey || !secret) {
            const err = new Error("Please provide access key and secret key.");
            LoggerService_1.logger.error("Access key or secret not defined", err);
            throw err;
        }
        this.auth = new AuthService_1.default(accessKey, secret);
        this.api = new APIService_1.default(this.auth);
        this.activeRooms = new api_wrappers_1.ActiveRoomWrapper(this.api);
        this.analytics = new api_wrappers_1.AnalyticsWrapper(this.api);
        this.externalStreams = new api_wrappers_1.ExternalStreamWrapper(this.api);
        this.liveStreams = new api_wrappers_1.LiveStreamWrapper(this.api);
        this.recordingAssets = new api_wrappers_1.RecordingAssetWrapper(this.api);
        this.recordings = new api_wrappers_1.RecordingWrapper(this.api);
        this.roomCodes = new api_wrappers_1.RoomCodeWrapper(this.api);
        this.rooms = new api_wrappers_1.RoomWrapper(this.api);
        this.sessions = new api_wrappers_1.SessionWrapper(this.api);
    }
    setLogLevel(level) {
        (0, LoggerService_1.setLogLevel)(level);
    }
}
exports.HMSSDK = HMSSDK;
//# sourceMappingURL=HMSSDK.js.map