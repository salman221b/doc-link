"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const QueryObjectIterator_1 = require("../utils/QueryObjectIterator");
/**
 * The wrapper class that implements all
 * {@link https://www.100ms.live/docs/server-side/v2/api-reference/recordings/overview Recording API} calls.
 */
class RecordingWrapper {
    constructor(apiService) {
        this.apiService = apiService;
        this.basePath = "/recordings";
    }
    /**
     * Get a list of recording objects that satisfy the `filter` params. A
     * `HMS.Recording.Object` iterable is returned that can be iterated with a `for await` loop.
     * @param filters recording filters like room ID and status
     * @returns a `HMS.QueryObjectIterator<HMS.Recording.Object>` object
     */
    list(filters) {
        const queryObjectIterable = new QueryObjectIterator_1.QueryObjectIterator((queryParams) => this.apiService.get(this.basePath, queryParams), filters);
        return queryObjectIterable;
    }
    /**
     * Get the details of a recording by its object id.
     * @param objectId Object ID
     * @returns a `HMS.Recording.Object` object
     */
    retrieve(objectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.get(`${this.basePath}/${objectId}`);
        });
    }
    /**
     * Start a new recording in a room.
     * @param roomId Room ID
     * @param params Params to start a room recording
     * @returns a `HMS.Recording.Object` object
     */
    start(roomId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.post(`${this.basePath}/room/${roomId}/start`, params);
        });
    }
    /**
     * Stop a specific recording by its object id.
     * @param objectId Object ID
     * @returns a `HMS.Recording.Object` object
     */
    stop(objectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.post(`${this.basePath}/${objectId}/stop`);
        });
    }
    /**
     * Stop all recordings in a room.
     * @param roomId Room ID
     * @returns a `HMS.Recording.Object[]` object
     */
    stopAll(roomId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const results = yield this.apiService.post(`${this.basePath}/room/${roomId}/stop`);
            return (_a = results.data) !== null && _a !== void 0 ? _a : [];
        });
    }
}
exports.default = RecordingWrapper;
//# sourceMappingURL=RecordingWrapper.js.map