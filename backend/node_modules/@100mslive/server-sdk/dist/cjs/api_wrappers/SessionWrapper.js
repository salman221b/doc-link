"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const LoggerService_1 = require("../services/LoggerService");
const QueryObjectIterator_1 = require("../utils/QueryObjectIterator");
/**
 * The wrapper class that implements all
 * {@link https://www.100ms.live/docs/server-side/v2/api-reference/Sessions/object Session API} calls.
 */
class SessionWrapper {
    constructor(apiService) {
        this.apiService = apiService;
        this.basePath = "/sessions";
    }
    /**
     * Get a list of session objects that satisfy the `filter` params. To get
     * all the sessions related to your account, don't pass in any param. And similarly,
     * specify the `room_id` in filters to get the sessions of a specific room. A
     * `HMS.Session.Object` iterable is returned that can be iterated with a `for await` loop.
     * @param filters Session filters like room id, active status and time range
     * @returns a `HMS.QueryObjectIterator<HMS.Session.Object>` object
     */
    list(filters) {
        const queryObjectIterable = new QueryObjectIterator_1.QueryObjectIterator((queryParams) => this.apiService.get(this.basePath, queryParams), filters);
        return queryObjectIterable;
    }
    /**
     * Get the session object by it's session id.
     * @param sessionId Session ID
     * @returns a `HMS.Session.Object` object
     */
    retrieveById(sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.get(`${this.basePath}/${sessionId}`);
        });
    }
    /**
     * Get the active session in a room. Throws an error if there's no active session in the
     * specified room, so use this with a `try-catch` block.
     * @param roomId Room ID
     * @returns
     */
    retrieveActiveByRoom(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = yield this.apiService.get(this.basePath, {
                room_id: roomId,
                active: true,
            });
            if (!results.data || results.data.length === 0) {
                const err = new Error(`No active Session found in the room with id - ${roomId}`);
                LoggerService_1.logger.error("No active Session found", err);
                throw err;
            }
            return results.data[0];
        });
    }
}
exports.default = SessionWrapper;
//# sourceMappingURL=SessionWrapper.js.map