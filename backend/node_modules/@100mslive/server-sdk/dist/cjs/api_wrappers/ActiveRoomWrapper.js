"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The wrapper class that implements all
 * {@link https://www.100ms.live/docs/server-side/v2/api-reference/active-rooms/object Active Room API} calls.
 */
class ActiveRoomWrapper {
    constructor(apiService) {
        this.apiService = apiService;
        this.basePath = "/active-rooms";
    }
    /**
     * Retrieve the details of an active room by specifying room id.
     * @param roomId Room ID
     * @returns a `HMS.ActiveRoom.Object` object
     */
    retrieve(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.get(`${this.basePath}/${roomId}`);
        });
    }
    /**
     * Get the details of a specific peer in an active room with
     * room id and peer id.
     * @param roomId Room ID
     * @param peerId Peer ID
     * @returns a `HMS.ActiveRoom.PeerWithTrack` object
     */
    retrievePeerDetails(roomId, peerId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.get(`${this.basePath}/${roomId}/peers/${peerId}`);
        });
    }
    /**
     * Retrieve the list of peers currently present in an active room
     * with the room id. The returned list is a `Record` where every
     * `HMS.ActiveRoom.Peer` object is matched by its corresponding peer id.
     * ### Example
     * ```ts
     * Record<string, HMS.ActiveRoom.Peer>{
     *  "peer_id_1": peerObj1
     *  "peer_id_2": peerObj2
     *  ...
     * }
     * ```
     * @param roomId Room ID
     * @returns a `Record<string, HMS.ActiveRoom.Peer>` object
     */
    retrieveActivePeers(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            const activePeers = yield this.apiService.get(`${this.basePath}/${roomId}/peers`);
            return activePeers.peers;
        });
    }
    /**
     * Update the `name`, `role` and `metadata` of a peer in an active room with
     * the room id and peer id. Specify the optional fields that need to be updated in
     * the `params` param.
     * @param roomId Room ID
     * @param peerId Peer ID
     * @param params params of the Peer to be updated
     * @returns a `HMS.ActiveRoom.PeerWithTrack` object
     */
    updatePeer(roomId, peerId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiService.post(`${this.basePath}/${roomId}/peers/${peerId}`, params);
        });
    }
    /**
     * Send a message to an active room. Specifying the receiver in `params`:
     * 1. `peer_id` - only that peer
     * 2. `role` - peers of that role
     * 3. `peer_id` and `role` - only to that peer (peer id has higher precedence)
     * 4. no `peer_id` or `role` specified - message broadcast to all peers
     * @param roomId Room ID
     * @param params params of the Message to be sent
     */
    sendMessage(roomId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.post(`${this.basePath}/${roomId}/send-message`, params);
            return;
        });
    }
    /**
     * Remove a specific peer or a group of peers with same `role` in an active
     * room.
     * @param roomId Room ID
     * @param params params for removing a Peer
     */
    removePeer(roomId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.post(`${this.basePath}/${roomId}/remove-peers`, params);
            return;
        });
    }
    /**
     * End the ongoing session in a room by removing all the peers. Use the `lock` field
     * in `params` to disable the room. No peer can join until the room is enabled once again (using `RoomWrapper`).
     * @param roomId Room ID
     * @param params params for Ending an Active Room
     */
    end(roomId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.post(`${this.basePath}/${roomId}/end-room`, params);
            return;
        });
    }
}
exports.default = ActiveRoomWrapper;
//# sourceMappingURL=ActiveRoomWrapper.js.map